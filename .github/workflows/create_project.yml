name: Create Project Folder
on:
  repository_dispatch:
    types: [create-project]
jobs:
  create-folder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Create project folder structure
        run: |
          mkdir -p "${PROJECT_NAME}" "projects"
          echo "${FILE_METADATA}" > file_metadata.json
          python -c "import json; with open('file_metadata.json', 'r', encoding='utf-8') as f: files = json.load(f); print('true' if any(f['path'].lower() in ['preview.png', 'арт.png', 'art.png'] for f in files) else 'false')" > preview_check.txt
          PREVIEW_EXISTS=$(cat preview_check.txt)
          if [ "$PREVIEW_EXISTS" != "true" ]; then
            echo "Error: preview.png, арт.png or art.png not provided"
            exit 1
          fi
          python -c "import json; with open('file_metadata.json', 'r', encoding='utf-8') as f: files = json.load(f); print('true' if all(f['path'].lower().endswith(('.png', '.pdn')) for f in files if f['path'].lower() not in ['preview.png', 'арт.png', 'art.png']) else 'false')" > paint_files_check.txt
          ONLY_PAINT_FILES=$(cat paint_files_check.txt)
          python create_project_json.py "${PROJECT_NAME}" "${FILE_METADATA}" || { echo "Failed to create JSON"; exit 1; }
          if [ "$IS_SINGLE_ZIP" = "true" ]; then
            zip -r "${PROJECT_NAME}/Archive.zip" "${PROJECT_NAME}" || { echo "Failed to create ZIP"; exit 1; }
          elif [ "$ONLY_PAINT_FILES" = "true" ]; then
            zip -r "${PROJECT_NAME}/Archive.zip" "${PROJECT_NAME}" -x "${PROJECT_NAME}/preview.png" "${PROJECT_NAME}/арт.png" "${PROJECT_NAME}/art.png" || { echo "Failed to create ZIP"; exit 1; }
          else
            mkdir -p "${PROJECT_NAME}/Итог" "${PROJECT_NAME}/other"
            mv "${PROJECT_NAME}"/*.png "${PROJECT_NAME}/Итог" 2>/dev/null || true
            mv "${PROJECT_NAME}"/*.pdn "${PROJECT_NAME}/Итог" 2>/dev/null || true
            mv "${PROJECT_NAME}"/* "${PROJECT_NAME}/other" 2>/dev/null || true
            zip -r "${PROJECT_NAME}/Archive.zip" "${PROJECT_NAME}/Итог" "${PROJECT_NAME}/other" || { echo "Failed to create ZIP"; exit 1; }
          fi
        env:
          PROJECT_NAME: ${{ github.event.client_payload.project_name }}
          FILE_METADATA: ${{ github.event.client_payload.file_metadata }}
          IS_SINGLE_ZIP: ${{ github.event.client_payload.is_single_zip }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changes
        run: |
          git config user.name "Endermanik13"
          git config user.email "endermanik13@example.com"
          git add .
          git commit -m "Create project: ${PROJECT_NAME} with JSON and ZIP" || { echo "Nothing to commit"; exit 0; }
          git push origin main
        env:
          PROJECT_NAME: ${{ github.event.client_payload.project_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
